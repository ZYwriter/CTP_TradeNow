package zhangbinhui.cn.com.sfit.tradenow2;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.os.Bundle;import android.support.v4.view.ViewPager;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.util.DisplayMetrics;import android.view.LayoutInflater;import android.view.View;import android.widget.ImageView;import android.widget.ListView;import android.widget.TextView;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import zhangbinhui.cn.com.sfit.tradenow2.adapter.MyBaseAdapter;import zhangbinhui.cn.com.sfit.tradenow2.adapter.MyPagerAdapter;import zhangbinhui.cn.com.sfit.tradenow2.field.InstrumentField;import zhangbinhui.cn.com.sfit.tradenow2.field.PositionDetailField;/** * Created by zhang.binhui on 2015-12-09. */public class PositionActivity extends AppCompatActivity {    static {        try {            System.loadLibrary("thosttraderapi");            System.loadLibrary("thostmduserapi");            System.loadLibrary("thosttraderapi_wrap");            System.loadLibrary("thostmduserapi_wrap");        } catch (Exception e) {            e.printStackTrace(System.out);        }    }    private ViewPager mPager;//页卡内容    private List<View> tabViews; // Tab页面列表    private ImageView cursor;// 动画图片    private TextView tab1, tab2, tab3;// 页卡头标    private int offset = 0;// 动画图片偏移量    private int currIndex = 0;// 当前页卡编号    private int bmpW;// 动画图片宽度    public static MyBaseAdapter myBaseAdapter = null;    public static ListView listView1 = null;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.position_order_deal);        Toolbar toolbar = (Toolbar)findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        //设置返回键可用        getSupportActionBar().setHomeButtonEnabled(true);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        toolbar.setNavigationOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                onBackPressed();            }        });        //初始化tab头标        initTextView();        //初始化cursor位置        initImageView();        //初始化pages        initViewPager();    }    @Override    public void onBackPressed() {        super.onBackPressed();    }    //-------------这部分用于处理tab滑动显示-----------------------    private void initTextView() {        tab1 = (TextView) findViewById(R.id.text1);        tab2 = (TextView) findViewById(R.id.text2);        tab3 = (TextView) findViewById(R.id.text3);        tab1.setOnClickListener(new MyOnClickListener(0));        tab2.setOnClickListener(new MyOnClickListener(1));        tab3.setOnClickListener(new MyOnClickListener(2));    }    class MyOnClickListener implements View.OnClickListener {        private int index = 0;        public MyOnClickListener(int i) {            index = i;        }        @Override        public void onClick(View v) {            mPager.setCurrentItem(index);        }    }    //--------------------------------------------------------------    private void initImageView() {        cursor = (ImageView) findViewById(R.id.cursor);        bmpW = BitmapFactory.decodeResource(getResources(), R.drawable.scrubber_control_focused_holo_meitu)                .getWidth();// 获取图片宽度        DisplayMetrics dm = new DisplayMetrics();        getWindowManager().getDefaultDisplay().getMetrics(dm);        int screenW = dm.widthPixels;// 获取分辨率宽度        offset = (screenW / 3 - bmpW) / 2;// 计算偏移量        Matrix matrix = new Matrix();        matrix.postTranslate(offset, 0);        cursor.setImageMatrix(matrix);// 设置动画初始位置    }    private void initViewPager() {        mPager = (ViewPager) findViewById(R.id.vPager);        tabViews = new ArrayList<View>();        LayoutInflater mInflater = getLayoutInflater();        //inflate 的意思是实例化一个布局        View page1 = mInflater.inflate(R.layout.page1, null);        View page2 = mInflater.inflate(R.layout.page2, null);        View page3 = mInflater.inflate(R.layout.page3, null);//--------------------------这一段在ViewPager里面添加ListView-------------------------        listView1 = (ListView)page1.findViewById(R.id.listView01);        ListView listView2 = (ListView)page1.findViewById(R.id.listView02);        ListView listView3 = (ListView)page1.findViewById(R.id.listView03);        if(TraderSpi.positionsDetails_show.size()!=0){            myBaseAdapter = new MyBaseAdapter(this,TraderSpi.positionsDetails_show);            listView1.setAdapter(myBaseAdapter);        }//---------------------------------------------------------------------------------        tabViews.add(page1);        tabViews.add(page2);        tabViews.add(page3);        mPager.setAdapter(new MyPagerAdapter(tabViews));        mPager.setCurrentItem(0);        mPager.addOnPageChangeListener(new MyOnPageChangeListener(offset, bmpW, currIndex, cursor));    }    //去除今仓    public void removeTodayPoistion(List<PositionDetailField> positionLists){        if(positionLists.size()!=0) {            for (int i = 0; i < positionLists.size(); i++) {                PositionDetailField positionDetail = positionLists.get(i);                if (positionDetail.getOpenDate().equals(positionDetail.getTradingDay())) {                    //把今仓去除                    positionLists.remove(i);                    //递归调用，因为删除一个之后，list的size发生了改变，原先的i已经不起作用                    removeTodayPoistion(positionLists);                }            }        }    }    //先将持仓明细改成一个HashMap<InstrumentID+direction,PositionDetailField>    public HashMap<String,PositionDetailField> genPositionMap(List<PositionDetailField> positionLists){        HashMap<String,PositionDetailField> positionMap = new HashMap<String,PositionDetailField>();        for(int i=0;i<positionLists.size();i++){            if(positionMap.size()==0){                positionMap.put(positionLists.get(i).getInstrumentID()+positionLists.get(i).getDirection(),positionLists.get(i));            }else{                //如果查不到这个key，则直接添加，不需要汇总                if(positionMap.get(positionLists.get(i).getInstrumentID()+positionLists.get(i).getDirection()) == null){                    positionMap.put(positionLists.get(i).getInstrumentID()+positionLists.get(i).getDirection(),positionLists.get(i));                }else{                    PositionDetailField oldPosition = positionMap.get(positionLists.get(i).getInstrumentID()+positionLists.get(i).getDirection());                    PositionDetailField newPosition = positionLists.get(i);                    PositionDetailField lastPosition = new PositionDetailField();                    int oldVolume = oldPosition.getVolume();                    int newVolume = positionLists.get(i).getVolume();                    double oldOpenprice = oldPosition.getOpenPrice();                    double newOpenprice = positionLists.get(i).getOpenPrice();                    int totalVolume = oldVolume+newVolume;                    double totalCost = oldVolume * oldOpenprice + newVolume * newOpenprice;                    lastPosition.setVolume(totalVolume);                    lastPosition.setOpenPrice(totalCost / totalVolume);                    //这里还缺少一个合约乘数                    InstrumentField instrumentField = TraderSpi.pInstrumentMap.get(oldPosition.getInstrumentID());                    if(oldPosition.getDirection()=='0'){                        lastPosition.setPositionProfitByTrade((oldPosition.getLastSettlementPrice() * totalVolume - totalCost)                                *instrumentField.getVolumeMultiple());                    }else{                        lastPosition.setPositionProfitByTrade((totalCost - oldPosition.getLastSettlementPrice() * totalVolume)                                *instrumentField.getVolumeMultiple());                    }                    lastPosition.setInstrumentID(oldPosition.getInstrumentID());                    lastPosition.setDirection(oldPosition.getDirection());                    //用旧的key，覆盖新的值                    positionMap.put(lastPosition.getInstrumentID()+lastPosition.getDirection(),lastPosition);                }            }        }        return positionMap;    }}